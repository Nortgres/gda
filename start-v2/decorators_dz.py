# Задание 10.1
'''
Задание 10.1. Объявите функцию, которая вычисляет площадь прямоугольника по двум
параметрам: width и height - ширина и высота прямоугольника. И возвращает результат
(сама ничего на экран не выводит). Создайте декоратор для этой функции, который
отображает результат на экране в виде строки (без кавычек):
"Площадь прямоугольника: <значение>"
Пример ввода:
8 11
Пример вывода:
Площадь прямоугольника: 88
'''
'''

def show_area(func):
    def wrapper(*args, **kwargs):
        print(f"Площадь прямоугольника: {func(*args, **kwargs)}")
        return func(*args, **kwargs)

    return wrapper


@show_area
def rectangle_area(width, height):
    return width * height


a, b = map(int, (input("Введите стороны прямоугольника: ").split()))
rectangle_area(a, b)
'''

# Задание 10.2
'''
Задание 10.2. На вход программы поступает строка из целых чисел, записанных через
пробел. Напишите функцию, которая преобразовывает эту строку в список из целых чисел и
возвращает его. Создайте декоратор для этой функции, который сортирует список чисел по
возрастанию. Результат сортировки должен возвращаться при вызове декоратора.
Вызовите декорированную функцию и отобразите полученный отсортированный список lst
командой: print(*lst)
Пример ввода:
8 11 -5 4 3 10
Пример вывода:
-5 3 4 8 10 11
'''

'''
def list_sorted(func):
    def wrapper(*args):
        l1 = func(*args)
        l1.sort()
        return l1

    return wrapper


@list_sorted
def list_num(n):
    return list(map(int, n.split()))


num = input("Введите числа через пробел: ")
lst = list_num(num)
print(*lst)
'''
# Задание 10.3
'''
Задание 10.3. Вводятся две строки из слов (слова записаны через пробел). Объявите
функцию, которая преобразовывает эти две строки в два списка слов и возвращает эти
списки. Создайте декоратор для этой функции, который из двух списков формирует
словарь, в котором ключами являются слова из первого списка, а значениями -
соответствующие элементы из второго списка. Полученный словарь должен возвращаться
при вызове декоратора. Примените декоратор к первой функции и вызовите ее для
введенных строк. Результат (словарь d) отобразите на экране командой:
print(*sorted(d.items()))
Пример ввода:
house river tree car
дом река дерево машина
Пример вывода:
('car', 'машина') ('house', 'дом') ('river', 'река') ('tree', 'дерево')
'''
'''
str1 = input('Введите строку №1: ')
str2 = input('Введите строку №2: ')

def dict_decor(func):
    def wrapper(*args, **kwargs):
        d1 = {}
        lst1, lst2 = func(*args, **kwargs)
        for i, j in zip(lst1, lst2):
            d1[i] = j
        return d1

    return wrapper


@dict_decor
def str_lst(a, b):
    l1 = list(a.split())
    l2 = list(b.split())
    return l1, l2

d = str_lst(str1, str2)

print(*sorted(d.items()))
'''
# Задание 10.4
'''
Задание 10.4. Вводится строка текста. Объявите функцию, которая принимает введенную
строку в виде параметра, не делает с ней никаких преобразований и возвращает ее в
исходном виде (сама функция ничего на экран не выводит). Создайте три декоратора для
этой функции, которые оборачивают введенный текст в теги: <b>, <i> и <u> (каждый
декоратор оборачивает только в один тег). Примените декораторы к функции (получатся
вложенные декораторы) и вызовите ее для введенной строки.
Пример ввода:
Miracle Garden
Пример вывода:
<b><i><u>Miracle Garden</u></i></b>
'''
'''
text1 = input("Введите текст: ")


def orig_text(text):
    return text


def dec_b(func):
    def wrapper(text):
        result = func(text)
        return f"<b>{result}</b>"

    return wrapper


def dec_i(func):
    def wrapper(text):
        result = func(text)
        return f"<i>{result}</i>"

    return wrapper


def dec_u(func):
    def wrapper(text):
        result = func(text)
        return f"<u>{result}</u>"

    return wrapper


@dec_b
@dec_i
@dec_u
def dec_text(text):
    return orig_text(text)


print(dec_text(text1))
'''
# Задание 10.5
'''
Задание 10.5. На вход программы поступают два целых числа a и b (a < b), записанные в
одну строку через пробел. На их основе создайте генератор для формирования квадратов
чисел в диапазоне [a; b]. Преобразуйте этот генератор в кортеж чисел (без использования
операторов циклов). Результат выведите на экран в виде строки чисел, записанных через
пробел.
Пример ввода:
2 10
Пример вывода:
4 9 16 25 36 49 64 81 100
'''
'''
a, b = map(int, (input('Введите числа: ').split()))
result = tuple(x*x for x in range(a, b+1))
print(*result)
'''
# Задание 10.6
'''
Задание 10.6. На вход программы поступают два целых числа a и b (a < b), записанные в
одну строку через пробел. На их основе создайте генератор который бы выдавал модули
целых чисел из диапазона [a; b]. Результат выведите на экран в виде строки чисел,
записанных через пробел.
Пример ввода:
-5 5
Пример вывода:
5 4 3 2 1 0 1 2 3 4 5
'''
'''
a, b = map(int, (input('Введите числа: ').split()))
num = tuple(abs(x) for x in range(a, b+1))
print(*num)
'''
# Задание 10.7
'''
Задание 10.7. На вход программы поступают два целых числа a и b (a < b), записанные в
одну строку через пробел. На их основе создайте генератор который бы выдавал модули
целых чисел из диапазона [a; b], а затем еще один, который бы вычислял кубы чисел
(возведение в степень 3), возвращаемых первым генератором. Результат выведите на экран
в виде строки чисел, записанных через пробел.
Пример ввода:
-5 5
Пример вывода:
125 64 27 8 1 0 1 8 27 64 125
'''
'''
a, b = map(int, (input('Введите числа: ').split()))
num = (abs(x) for x in range(a, b+1))
cube_num = (i**3 for i in num)
print(*cube_num)
'''
# Задание 10.8
'''
Задание 10.8. Используя символы малых букв латинского алфавита (строка
ascii_lowercase):
from string import ascii_lowercase
запишите генератор, который бы возвращал все сочетания из двух букв латинского
алфавита. Выведите сочетания с 21 по 30 на экран в строку через пробел.
Например, первые семь начальных сочетаний имеют вид:
aa ab ac ad ae af ag
Пример ввода:
Пример вывода:
au av aw ax ay az ba bb bc bd
'''
'''
from string import ascii_lowercase
def abc():
    for i in ascii_lowercase:
        for j in ascii_lowercase:
            yield i+j
gen = abc()

lst1 = list(gen)
print(lst1[20:30])

#gen = (x + y for x in ascii_lowercase for y in ascii_lowercase)
#for _ in range(20):
#    next(gen)
    
#for _ in range(21, 31):
#    print(next(gen), end=' ')
'''
# Задание 10.9
'''
Задание 10.9. Вводится натуральное число n. Необходимо определить функцию-генератор,
которая бы возвращала текущую сумму чисел последовательности длины n в диапазоне
целых чисел [1; n]. Например:
- для первого числа 1 сумма равна 1;
- для второго числа 2 сумма равна 1+2 = 3
....
- для N-го числа сумма равна 1+2+...+(N-1)+N
Реализовать функцию-генератор без использования коллекций. Результат выведите на
экран в виде строки чисел, записанных через пробел.
Пример ввода:
20
Пример вывода:
1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210
'''
'''
def num_n():
    x = 0
    for i in range(1, n + 1):
        x += i
        yield x


n = int(input("Введите число: "))
gen = num_n()
print(*gen)
'''
# Задание 10.10.
'''
Задание 10.10. На вход программы поступает строка из целых чисел, записанных через
пробел. Напишите программу для поиска чисел, кратных девятнадцати или тринадцати, из
введенного списка чисел, используя функцию filter() и lambda-функцию. Результат выведите
на экран в виде строки чисел, записанных через пробел.
Пример ввода:
19 65 57 39 152 639 121 44 90 190
Пример вывода:
19 65 57 39 152 190
'''
'''
num = list(map(int, (input("Введите числа: ").split())))
res = list(filter(lambda n: n % 19 == 0 or n % 13 == 0, num))
print(*res)
'''
# Задание 10.11.
'''
Задание 10.11. На вход программы поступает строка из целых чисел, записанных через
пробел. Напишите программу для поиска количества четных и нечетных чисел из
введенного списка, используя функцию filter() и lambda-функцию. Результат выведите на
экран по шаблону из примера вывода.
Пример ввода:
1 2 3 5 7 8 9 10
Пример вывода:
Количество четных чисел: 3
Количество нечетных чисел: 5
'''
'''
num = list(map(int, (input("Введите числа: ").split())))
res_even = list(filter(lambda n: n % 2 == 0, num))
res_odd = list(filter(lambda n: n % 2 != 0, num))
print(f'Количество четных чисел: {len(res_even)}')
print(f'Количество нечетных чисел: {len(res_odd)}')
'''
# Задание 10.12.
'''
Задание 10.12. На вход программы поступает строка из целых чисел, записанных через
пробел. Напишите программу для поиска чисел-палиндромов в заданном списке, используя
функцию filter() и lambda-функцию. Результат выведите на экран в виде строки чисел,
записанных через пробел.
Пример ввода:
3 8 12 22 55 171 180 1024 2442 4096
Пример вывода:
3 8 22 55 171 2442
'''
'''
num = list(input("Введите числа: ").split())
num_pal = list(filter(lambda x: x == x[::-1], num))
print(*num_pal)
'''
# Задание 10.13.
'''
Задание 10.13. На вход программы поступает строка из слов, разделенных пробелами.
Напишите программу для поиска слов, состоящих ровно из 6 букв в заданном списке,
используя функцию filter() и lambda-функцию. Результат выведите на экран в виде строки
слов, записанных через пробел.
Пример ввода:
Monday Tuesday Wednesday Thursday Friday Saturday Sunday
Пример вывода:
Monday Friday Sunday
'''
'''
words = list(input('Введите слова через пробел: ').split())
six_symbol = list(filter(lambda y: len(y) == 6, words))
print(*six_symbol)
'''
# Задание 10.14.
'''
Задание 10.14. На вход программы поступает строка из целых чисел, записанных через
пробел. Напишите программу которая утроит все числа в заданном списке, используя
функцию map() и lambda-функцию. Результат выведите на экран в виде строки чисел,
записанных через пробел.
Пример ввода:
1 2 3 4 5 6 7
Пример вывода:
3 6 9 12 15 18 21
'''
'''
num = input("Введите числа: ")
print(*list(map(lambda i: int(i)*3, num.split())))
'''
# Задание 10.15.
'''
Задание 10.15. Вводятся три строки из целых чисел, записанных через пробел. Из каждой
их этих строк формируется список. Напишите программу которая сложит все списки,
используя функцию map() и lambda-функцию. Суммой списков будем считать новый список,
элементы которого равны суммам соответствующих элементов исходных списков. Результат
выведите на экран в виде строки чисел, записанных через пробел.
Пример ввода:
1 2 3
4 5 6
7 8 9
Пример вывода:
12 15 18
'''
'''
num1 = list(map(int, (input("Введите числа: ").split())))
num2 = list(map(int, (input("Введите числа: ").split())))
num3 = list(map(int, (input("Введите числа: ").split())))
res = list(map(lambda x, y, z: x + y + z, num1, num2, num3))
print(*res)
'''
# Задание 10.16.
'''
Задание 10.16. Пользователь с клавиатуры вводит имена и фамилии студентов, даты их
рождения и вес, разделенные знаком решетка # (пока не введет число 0). Напишите
программу которая сформирует списки имен и фамилий, дат рождения и веса, используя
функцию map() и lambda-функцию. Результат выведите на экран по шаблону из примера
вывода через запятую.
Пример ввода:
Анастасия Иванова # 15.05.2002 # 55kg
Николай Голубев # 17.05.2002 # 67kg
Екатерина Волкова # 16.02.1999 # 59kg
Юрий Тверской # 25.09.1998 # 65kg
0
Пример вывода:
Как зовут: Анастасия Иванова, Николай Голубев, Екатерина Волкова, Юрий Тверской
Родился: 15.05.2002, 17.05.2002, 16.02.1999, 25.09.1998
Весит: 55, 67, 59, 65
'''
'''
lst1 = []
while True:
    stud = input("Введите данные студента: ")
    if stud != '0':
        lst1.append((stud).split('#'))
    elif stud == '0':
        break
    else:
        continue
stud_name = (map(lambda s: s[0].strip(), lst1))
stud_db = list(map(lambda s: s[1].strip(), lst1))
stud_w = list(map(lambda s: s[2].strip(), lst1))
print("Как зовут: ", ', '.join(stud_name), "\nРодился: ", ', '.join(stud_db), "\nВесит: ", ', '.join(stud_w))
'''
''' #от Олега
lst, tp = [], ()

while True:
    entered_users = input('Enter somthing: ').split('#')
    if entered_users == ['0']:
        break
    tp = tuple(map(lambda x: x.strip().replace('kg', ''), entered_users))
    lst.append(tp)
names, birth_dates, weights = zip(*lst)
print(f'Как зовут: {", ".join(i for i in names)}')
print(f'Родился: {", ".join(i for i in birth_dates)}')
print(f'Весит: {", ".join(i for i in weights)}')
'''
# Задание 10.17.
'''
Задание 10.17. На вход поступает список из вещественных чисел, записанных в строку
через пробел. С помощью функции map() преобразовать числа в строке в их вещественное
представление и отобразить первые три числа. (Полагается, что минимум три
вещественных числа имеются). Реализовать извлечение чисел через функцию next().
Результат отобразить в строку через пробел.
Пример ввода:
3.14 2.71 -36.6 75.0 12.2
Пример вывода:
3.14 2.71 -36.6
'''
'''
num = input("Введите числа: ")
gen = map(float, num.split())
for _ in range(3):
    print(next(gen), end=' ')
'''
# Задание 10.18.
'''
Задание 10.18. Вводятся два списка целых чисел. Необходимо попарно перебрать их
элементы и перемножить между собой. При реализации программы используйте функции
zip() и map(). Выведите на экран первые три значения, используя функцию next(). Значения
выводятся в строчку через пробел. (Полагается, что три выходных значения всегда будут
присутствовать).
Пример ввода:
2 -5 7 10 -3 37 45
12 -8 -16 7 9 3
Пример вывода:
24 40 -112
'''
'''
num1 = list(map(int, (input("Введите числа: ").split())))
num2 = list(map(int, (input("Введите числа: ").split())))
res = map(lambda x: x[0]*x[1], zip(num1, num2))
for _ in range(3):
    print(next(res), end=' ')
'''
# Задание 10.19.
'''
Задание 10.19. Вводится строка из слов, записанных через пробел. Необходимо на их
основе составить прямоугольную таблицу из трех столбцов и N строк (число строк столько,
сколько получится). Лишние (выходящие) слова - отбросить. Реализовать эту программу с
использованием функции zip(). Результат отобразить на экране в виде прямоугольной
таблицы из слов, записанных через пробел (в каждой строчке).
Пример ввода:
Москва Уфа Тула Самара Омск Воронеж Владивосток Лондон Калининград Севастополь
Пример вывода:
Москва Уфа Тула
Самара Омск Воронеж
Владивосток Лондон Калининград
'''
words = input("Введите слова: ").split()
st1 = list(words[0::3])
st2 = list(words[1::3])
st3 = list(words[2::3])
rez = zip(st1, st2, st3)
for _ in rez:
    print(*_)